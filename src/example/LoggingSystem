Chain of Responsibility Design Pattern

Design Logging System
--------------------------

Logger
Main
-----------------------

class Logger {
    public static int DEBUG = 0;
    public static int INFO = 1;
    public static int ERROR = 3;

    Logger nextLogger;

    Logger(Logger nextLogger) {
        this.nextLogger = nextLogger;
    }

    public void log(int type, String message) {
        if(nextLogger == null)
            loggerUnavailable();
        nextLogger.log(type, message);
    }

    loggerUnavailable() {
        System.out.println("logger unavailable");
    }
}

class InfoLogger extends Logger {
    InfoLogger(Logger nextLogger) {
        super(nextLogger)
    }

    log( int type, String message) {
        if(type == INFO) {
            System.out.println("INFO: " + message);
        } else {
            super.log(type, message);
        }
    }
}

class DebugLogger extends Logger {
    DebugLogger(Logger nextLogger) {
        super(nextLogger)
    }

    log( int type, String message) {
        if(type == DEBUG) {
            System.out.println("DEBUG: " + message);
        } else {
            super.log(type, message);
        }
    }
}

class ErrorLogger extends Logger {
    ErrorLogger(Logger nextLogger) {
        super(nextLogger)
    }

    log( int type, String message) {
        if(type == ERROR) {
            System.out.println("ERROR: " + message);
        } else {
            super.log(type, message);
        }
    }
}

Main {
    Logger logger = new DebugLogger(new InfoLogger(new ErrorLogger(null)));

    logger.log(logger.INFO, "this is info log");
    logger.log(logger.DEBUG, "this is debug log");
    logger.log(logger.ERROR, "this is error log");
    logger.log(7, "this is unavailable log");
}
